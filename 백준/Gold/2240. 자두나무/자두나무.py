import sys
input = sys.stdin.readline

t, w = map(int, input().split())
tree = [0]
for _ in range(t):
    tree.append(int(input()) - 1)

# 자두가 떨어진 횟수 + 1, 나무 위치, 자두가 트라이 할 수 있는 횟수 + 1 => 자두가 받은 자두의 수
dp = [[[0] * (w + 1), [0] * (w + 1)] for _ in range(t + 1)]
# 제일 처음 떨어진 위치
if tree[1] == 0:
    # 초기 위치 == 1
    # 자두는 움직이지 않고도 자두를 먹었으니까 첫 번째 초에 0트를 하고 1개를 먹음
    dp[1][0][0] = 1
else:
    # 움직이고, 두번째 나무에서 움직임 1개 소모해서 자두를 먹었음
    dp[1][1][1] = 1

for i in range(2, t + 1):
    # 왼쪽 나무에서 떨어짐
    if tree[i] == 0:
        # 왼쪽 나무에 있었는데 그냥 받으므로 + 1 
        dp[i][0][0] = dp[i - 1][0][0] + 1
        # 오른쪽 나무에 있었는데, 안 움직이고 받지도 않을래...
        dp[i][1][0] = dp[i - 1][1][0]
        for j in range(1, w + 1):
            # 왼쪽 나무에 있는 것을 택함 => 왼쪽 나무에 있었고 턴 소모 안하고 자두 받음 vs 오른쪽 나무에 있었는데 턴 소모해서 자두를 받음
            dp[i][0][j] = max(dp[i - 1][0][j] + 1, dp[i - 1][1][j - 1] + 1)
            # 굳이 오른쪽으로 갈래 => 오른쪽 나무에서 턴 소모 안하고 자두도 안받음 vs 왼쪽 나무에서 턴 소모해서 자두를 안받기를 택함
            dp[i][1][j] = max(dp[i - 1][1][j], dp[i - 1][0][j - 1])
    else:
        dp[i][0][0] = dp[i - 1][0][0]
        dp[i][1][0] = dp[i - 1][1][0] + 1
        for j in range(1, w + 1):
            dp[i][0][j] = max(dp[i - 1][0][j], dp[i - 1][1][j - 1])
            dp[i][1][j] = max(dp[i - 1][1][j] + 1, dp[i - 1][0][j - 1] + 1)
print(max(max(dp[t][0]), max(dp[t][1])))
